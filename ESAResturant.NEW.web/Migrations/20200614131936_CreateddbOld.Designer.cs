// <auto-generated />
using System;
using ESC.Resturant.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ESAResturant.NEW.web.Migrations
{
    [DbContext(typeof(ESC_Resturant_DBContext))]
    [Migration("20200614131936_CreateddbOld")]
    partial class CreateddbOld
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ESA.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BoxMonyTypeId");

                    b.Property<int?>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int?>("PrinterId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("BoxMonyTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PrinterId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ApplicationDiscountId");

                    b.Property<int?>("ApplicationId");

                    b.Property<double?>("ApplicationValue");

                    b.Property<int?>("BillPlaceId");

                    b.Property<int?>("BillTypeId");

                    b.Property<int?>("BranchId");

                    b.Property<bool?>("CheckWiteInvoies");

                    b.Property<string>("Code");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime?>("CurrentDate");

                    b.Property<double?>("CurrentDiscount");

                    b.Property<DateTime?>("Date");

                    b.Property<double?>("DescountValue");

                    b.Property<int?>("DiscountId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("IsApproverd");

                    b.Property<bool?>("IsDelete");

                    b.Property<double?>("NetTotal");

                    b.Property<string>("Notes");

                    b.Property<int?>("OrderNo");

                    b.Property<double?>("Paied");

                    b.Property<int?>("PaymentId");

                    b.Property<int?>("PeopleID");

                    b.Property<string>("PepoleName");

                    b.Property<string>("Reference");

                    b.Property<double?>("Remaining");

                    b.Property<double?>("ServiceFees");

                    b.Property<double?>("ServiceFeesValue");

                    b.Property<double?>("SupTotal");

                    b.Property<string>("TableNo");

                    b.Property<double?>("TotalAfterVatTax");

                    b.Property<double?>("TotalNotePrice");

                    b.Property<double?>("TotalQty");

                    b.Property<double?>("TotalVatTax");

                    b.Property<string>("UserId");

                    b.Property<int?>("VisaID");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BillPlaceId");

                    b.HasIndex("BillTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillCurrencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BankValue");

                    b.Property<int?>("BillId");

                    b.Property<int?>("CurrencyId");

                    b.Property<bool>("IsSelected");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BillCurrencies");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillDeliveries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillId");

                    b.Property<string>("DeliveryAddress");

                    b.Property<string>("DeliveryName");

                    b.Property<string>("DeliveryPhone");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.ToTable("BillDeliveries");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillId");

                    b.Property<DateTime?>("CurrentDate");

                    b.Property<DateTime?>("Date");

                    b.Property<double?>("Discount");

                    b.Property<double?>("DiscountValue");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsFinshed");

                    b.Property<bool?>("IsNew");

                    b.Property<double?>("ItemBuyPrice");

                    b.Property<int?>("ItemId")
                        .IsRequired();

                    b.Property<int?>("ItemPriceId");

                    b.Property<double?>("ItemSellPrice");

                    b.Property<double?>("NetTotal");

                    b.Property<string>("Note");

                    b.Property<double?>("NotePrice");

                    b.Property<double?>("Qty");

                    b.Property<double?>("SmallUnitQty");

                    b.Property<double?>("SupTotal");

                    b.Property<string>("TableNo");

                    b.Property<double?>("TotalAfterVatTax");

                    b.Property<int?>("UnitId");

                    b.Property<double?>("VATTax");

                    b.Property<double?>("VatTaxValue");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemPriceId");

                    b.HasIndex("UnitId");

                    b.ToTable("BillDetails");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillPlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Image");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("BillPlaces");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillTaxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillId");

                    b.Property<double>("PercentValue");

                    b.Property<int?>("TaxesId");

                    b.Property<double>("Total");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("TaxesId");

                    b.ToTable("BillTaxes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("BillTypes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BoxMonies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BoxMonyCategoryId");

                    b.Property<int?>("BoxMonyTypeId");

                    b.Property<double>("Credit");

                    b.Property<int?>("CurrencyId");

                    b.Property<double>("CurrentBalance");

                    b.Property<DateTime?>("CurrentDate");

                    b.Property<DateTime?>("Date");

                    b.Property<double>("Debit");

                    b.Property<string>("Note");

                    b.Property<int?>("PeopleId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BoxMonyCategoryId");

                    b.HasIndex("BoxMonyTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PeopleId");

                    b.HasIndex("UserId");

                    b.ToTable("BoxMonies");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BoxMonyCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCredit");

                    b.Property<bool>("IsDebit");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("BoxMonyCategories");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BoxMonyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("BoxMonyTypes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CompanyInfoId");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.HasIndex("CompanyInfoId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Logo");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.Property<string>("Note");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("companyInfos");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Currencies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BankValue");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CreatedBy");

                    b.Property<bool>("IsDefault");

                    b.Property<DateTime?>("ModifiedAt");

                    b.Property<int?>("ModifiedBy");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.DiscountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("DiscountTypes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AveragePrice");

                    b.Property<string>("BarCode1");

                    b.Property<string>("BarCode2");

                    b.Property<string>("BarCode3");

                    b.Property<decimal?>("BuyPrice");

                    b.Property<string>("Code");

                    b.Property<int>("CurrentDicount");

                    b.Property<double?>("CurrentQuantity");

                    b.Property<double?>("FirstQuantity");

                    b.Property<string>("ImageName");

                    b.Property<string>("ImagePath");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsForSell");

                    b.Property<int?>("ItemCategoryId")
                        .IsRequired();

                    b.Property<double?>("ItemIndex");

                    b.Property<DateTime?>("LastPurchaseDate");

                    b.Property<DateTime?>("LastSeleDate");

                    b.Property<int?>("LowestQuantity");

                    b.Property<decimal?>("LowestSellPrice");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.Property<string>("Note");

                    b.Property<double>("SmallUnitQty");

                    b.Property<double>("TotalAveragePrice");

                    b.Property<int?>("UnitId");

                    b.Property<double?>("VAT");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BuyCategory");

                    b.Property<string>("Image");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("PrinterId")
                        .IsRequired();

                    b.Property<bool?>("SellCategory");

                    b.HasKey("Id");

                    b.HasIndex("PrinterId");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemComponent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ItemComponentId");

                    b.Property<int?>("ItemPriceId");

                    b.Property<double>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("ItemComponentId");

                    b.HasIndex("ItemPriceId");

                    b.ToTable("ItemComponents");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemPrices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefullt");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("ItemId");

                    b.Property<decimal>("Price");

                    b.Property<int?>("SizeId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("SizeId");

                    b.ToTable("ItemPrices");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IndexRow");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("SizeNameAr");

                    b.Property<string>("SizeNameEn");

                    b.HasKey("Id");

                    b.ToTable("ItemSizes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.Property<double>("Price");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.PaymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.People", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<double>("Balance");

                    b.Property<string>("Code");

                    b.Property<double>("Credit");

                    b.Property<double>("Debit");

                    b.Property<double>("Discount");

                    b.Property<bool?>("IsDelete");

                    b.Property<bool?>("IsNotActive");

                    b.Property<bool?>("IsRemember");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("NumberCar");

                    b.Property<int?>("PeopleCategoryId");

                    b.Property<int?>("PeopleTypeId");

                    b.Property<string>("Phone");

                    b.Property<double>("Point");

                    b.Property<DateTime?>("RememberDate");

                    b.HasKey("Id");

                    b.HasIndex("PeopleCategoryId");

                    b.HasIndex("PeopleTypeId");

                    b.ToTable("Peoples");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.PeopleAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("AccCurrentBalance");

                    b.Property<double?>("AccountCredit");

                    b.Property<double?>("AccountDebit");

                    b.Property<DateTime?>("AccoutDate");

                    b.Property<int?>("BillId");

                    b.Property<DateTime?>("CurrentDate");

                    b.Property<int?>("PeopleId");

                    b.Property<int?>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("PeopleId");

                    b.ToTable("PeopleAccounts");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.PeopleCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("PeopleCategories");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.PeopleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("PeopleTypes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Printer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountCopies");

                    b.Property<string>("DisplayNameAR");

                    b.Property<string>("DisplayNameEN");

                    b.Property<string>("PrinterName");

                    b.HasKey("Id");

                    b.ToTable("Printers");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsStatus");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.TablesPlaces", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count");

                    b.Property<int?>("EndNum");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.Property<int?>("StartNum");

                    b.HasKey("Id");

                    b.ToTable("TablesPlaces");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Taxes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DiscountId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.Property<double>("PercentValue");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.ToTable("Taxes");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDelete");

                    b.Property<bool?>("IsForBuy");

                    b.Property<bool?>("IsForSell");

                    b.Property<string>("NameAr");

                    b.Property<string>("NameEn");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.UserDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CurrentDate");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDates");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.UserItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ItemCategories");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserItemCategories");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DefaultRoles");

                    b.Property<bool?>("IsDelete");

                    b.Property<string>("NameAR");

                    b.Property<string>("NameEN");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ESA.Data.ApplicationUser", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.BoxMonyType", "BoxMonyType")
                        .WithMany("User")
                        .HasForeignKey("BoxMonyTypeId");

                    b.HasOne("ESC.Resturant.Data.Entities.Branch", "Branch")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Printer", "Printer")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.UserType", "UserType")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Application", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Applications")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Bill", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Application", "Application")
                        .WithMany("Bills")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.BillPlace", "BillPlace")
                        .WithMany("Bills")
                        .HasForeignKey("BillPlaceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.BillType", "BillType")
                        .WithMany("Bills")
                        .HasForeignKey("BillTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Branch", "Branch")
                        .WithMany("Bills")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Currencies", "Currencies")
                        .WithMany("Bills")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Bills")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.PaymentType", "PaymentType")
                        .WithMany("Bills")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESA.Data.ApplicationUser", "User")
                        .WithOne("Bills")
                        .HasForeignKey("ESC.Resturant.Data.Entities.Bill", "UserId");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillCurrencies", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Bill", "Bill")
                        .WithMany("BillCurrencies")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Currencies", "Currencies")
                        .WithMany("BillCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillDeliveries", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Bill", "Bill")
                        .WithMany("BillDeliveries")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillDetails", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Bill", "Bill")
                        .WithMany("BillDetails")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Item", "Item")
                        .WithMany("BillDetails")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.ItemPrices", "ItemPrice")
                        .WithMany("BillDetails")
                        .HasForeignKey("ItemPriceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Unit", "Unit")
                        .WithMany("BillDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BillTaxes", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Bill", "Bill")
                        .WithMany("BillTaxes")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Taxes", "Taxes")
                        .WithMany("BillTaxes")
                        .HasForeignKey("TaxesId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.BoxMonies", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.BoxMonyCategories", "BoxMonyCategories")
                        .WithMany("BoxMonies")
                        .HasForeignKey("BoxMonyCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.BoxMonyType", "BoxMonyTypes")
                        .WithMany("BoxMonies")
                        .HasForeignKey("BoxMonyTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.Currencies", "Currencies")
                        .WithMany("BoxMonies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.People", "Peoples")
                        .WithMany("BoxMonies")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESA.Data.ApplicationUser", "User")
                        .WithMany("BoxMonies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Branch", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.CompanyInfo", "CompanyInfo")
                        .WithMany("Branch")
                        .HasForeignKey("CompanyInfoId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Item", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.ItemCategory", "ItemCategory")
                        .WithMany("Items")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESC.Resturant.Data.Entities.Unit", "Unit")
                        .WithMany("Item")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemCategory", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Printer", "Printer")
                        .WithMany("ItemCategories")
                        .HasForeignKey("PrinterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemComponent", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Item", "Item")
                        .WithMany("ItemComponents")
                        .HasForeignKey("ItemComponentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.ItemPrices", "ItemPrice")
                        .WithMany("ItemComponents")
                        .HasForeignKey("ItemPriceId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.ItemPrices", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.Item", "Items")
                        .WithMany("ItemPrices")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.ItemSize", "ItemSize")
                        .WithMany("ItemPrices")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.People", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.PeopleCategory", "PeopleCategory")
                        .WithMany("Peoples")
                        .HasForeignKey("PeopleCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ESC.Resturant.Data.Entities.PeopleType", "PeopleType")
                        .WithMany("Peoples")
                        .HasForeignKey("PeopleTypeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.PeopleAccount", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.People", "People")
                        .WithMany("PeopleAccounts")
                        .HasForeignKey("PeopleId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.Taxes", b =>
                {
                    b.HasOne("ESC.Resturant.Data.Entities.DiscountType", "DiscountType")
                        .WithMany("Taxes")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.UserDate", b =>
                {
                    b.HasOne("ESA.Data.ApplicationUser", "User")
                        .WithOne("UserDate")
                        .HasForeignKey("ESC.Resturant.Data.Entities.UserDate", "UserId");
                });

            modelBuilder.Entity("ESC.Resturant.Data.Entities.UserItemCategory", b =>
                {
                    b.HasOne("ESA.Data.ApplicationUser", "ApplicationUser")
                        .WithOne("userItemCategoryies")
                        .HasForeignKey("ESC.Resturant.Data.Entities.UserItemCategory", "UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ESA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ESA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ESA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ESA.Data.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
